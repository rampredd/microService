// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gateway.proto

/*
Package gateway is a generated protocol buffer package.

It is generated from these files:
	gateway.proto

It has these top-level messages:
	QueryRequest
	QueryResponse
*/
package gateway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "microService/proto/query"
import _ "microService/proto/query"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Gateway service

type GatewayService interface {
	Search(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error)
}

type gatewayService struct {
	c    client.Client
	name string
}

func NewGatewayService(name string, c client.Client) GatewayService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gateway"
	}
	return &gatewayService{
		c:    c,
		name: name,
	}
}

func (c *gatewayService) Search(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error) {
	req := c.c.NewRequest(c.name, "Gateway.Search", in)
	out := new(QueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gateway service

type GatewayHandler interface {
	Search(context.Context, *QueryRequest, *QueryResponse) error
}

func RegisterGatewayHandler(s server.Server, hdlr GatewayHandler, opts ...server.HandlerOption) {
	type gateway interface {
		Search(ctx context.Context, in *QueryRequest, out *QueryResponse) error
	}
	type Gateway struct {
		gateway
	}
	h := &gatewayHandler{hdlr}
	s.Handle(s.NewHandler(&Gateway{h}, opts...))
}

type gatewayHandler struct {
	GatewayHandler
}

func (h *gatewayHandler) Search(ctx context.Context, in *QueryRequest, out *QueryResponse) error {
	return h.GatewayHandler.Search(ctx, in, out)
}
